Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table =10000

SELECT COUNT(*) AS TotalRecords
FROM Attribute

ii. Business table =10000

SELECT COUNT(*) AS TotalRecords
FROM business


iii. Category table =10000

SELECT COUNT(*) AS TotalRecords
FROM category


iv. Checkin table =10000

SELECT COUNT(*) AS TotalRecords
FROM checkin


v. elite_years table =10000 

SELECT COUNT(*) AS TotalRecords
FROM elite_years


vi. friend table = 10000

SELECT COUNT(*) AS TotalRecords
FROM friend


vii. hours table =10000

SELECT COUNT(*) AS TotalRecords
FROM hours


viii. photo table = 10000

SELECT COUNT(*) AS TotalRecords
FROM photo


ix. review table = 10000

SELECT COUNT(*) AS TotalRecords
FROM review


x. tip table = 10000

SELECT COUNT(*) AS TotalRecords
FROM tip


xi. user table = 10000

SELECT COUNT(*) AS TotalRecords
FROM user


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000 (primary key: id)

SELECT COUNT(DISTINCT id) AS TotalDistinctids
FROM business


ii. Hours =1562 (foreign key: business_id)

SELECT COUNT(DISTINCT business_id) AS TotalDistinctids
FROM hours


iii. Category = 2643 (foreign key: business_id)

SELECT COUNT(DISTINCT business_id) AS TotalDistinctids
FROM category


iv. Attribute = 1115  (foreign key: business_id)

SELECT COUNT(DISTINCT business_id) AS TotalDistinctids
FROM attribute


v. Review =8090 (foreign key: business_id)

SELECT COUNT(DISTINCT business_id) AS TotalDistinctids
FROM review

Review =9581  (foreign key: user_id)

SELECT COUNT(DISTINCT user_id) AS TotalDistinctids
FROM review

Review =10000 (primary key: id)

SELECT COUNT(DISTINCT id) AS TotalDistinctids
FROM review


vi. Checkin = 493 (foreign key: business_id)

SELECT COUNT(DISTINCT business_id) AS TotalDistinctids
FROM checkin

vii. Photo =6493 (foreign key: business_id)

SELECT COUNT(DISTINCT business_id) AS TotalDistinctids
FROM photo

Photo =10000 (primary key: id)

SELECT COUNT(DISTINCT id) AS TotalDistinctids
FROM photo


viii. Tip = 3979 (foreign key: business_id)

SELECT COUNT(DISTINCT business_id) AS TotalDistinctids
FROM tip

Tip =537 (foreign key: user_id)

SELECT COUNT(DISTINCT user_id) AS TotalDistinctids
FROM tip

ix. User = 10000 (primary key: id)

SELECT COUNT(DISTINCT id) AS TotalDistinctids
FROM user

x. Friend =  11 (foreign key: user_id)

SELECT COUNT(DISTINCT user_id) AS TotalDistinctids
FROM friend


xi. Elite_years =2780 (foreign key: user_id)

SELECT COUNT(DISTINCT user_id) AS TotalDistinctids
FROM elite_years


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: NO
	
	
SQL code used to arrive at answer:


SELECT *
FROM User
WHERE compliment_more IS NULL OR name IS NULL OR compliment_profile IS NULL OR compliment_hot IS NULL OR compliment_cute IS NULL OR compliment_list IS NULL OR compliment_note IS NULL OR compliment_plain IS NULL OR compliment_cool IS NULL OR compliment_funny IS NULL OR compliment_writer IS NULL OR compliment_photos IS NULL OR review_count IS NULL OR yelping_since IS NULL OR funny IS NULL OR cool IS NULL OR useful IS NULL OR fans IS NULL OR average_stars IS NULL

4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1		max:5		avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000		avg:24.2995

List the cities with the most reviews in descending order:

SQL code used to arrive at answer:

SELECT
    City,
    COUNT(*) AS ReviewCount
FROM
    Business
JOIN
    Review ON Business.BusinessId = Review.BusinessId
GROUP BY
    City
ORDER BY
    ReviewCount DESC

Copy and Paste the Result Below:

city            | ReviewCount |
+-----------------+-------------+
| Las Vegas       |        1561 |
| Phoenix         |        1001 |
| Toronto         |         985 |
| Scottsdale      |         497 |
| Charlotte       |         468 |
| Pittsburgh      |         353 |
| Montréal        |         337 |
| Mesa            |         304 |
| Henderson       |         274 |
| Tempe           |         261 |
| Edinburgh       |         239 |
| Chandler        |         232 |
| Cleveland       |         189 |
| Gilbert         |         188 |
| Glendale        |         188 |
| Madison         |         176 |
| Mississauga     |         150 |
| Stuttgart       |         141 |
| Peoria          |         105 |
| Markham         |          80 |
| Champaign       |          71 |
| North Las Vegas |          70 |
| North York      |          64 |
| Surprise        |          60 |
| Richmond Hill   |          54 |
+-----------------+-------------+
(Output limit exceeded, 25 of 362 total rows shown)

6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT
    Stars,
    COUNT(*) AS RatingCount
FROM
    Business
WHERE
    Business.City = 'Avon'
GROUP BY
    Stars
ORDER BY
    Stars DESC;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

 stars | RatingCount |
+-------+-------------+
|   5.0 |           1 |
|   4.5 |           1 |
|   4.0 |           2 |
|   3.5 |           3 |
|   2.5 |           2 |
|   1.5 |           1 |
+-------+-------------+


ii. Beachwood

SQL code used to arrive at answer:

SELECT
    Stars,
    COUNT(*) AS RatingCount
FROM
    Business
WHERE
    Business.City = 'Beachwood'
GROUP BY
    Stars
ORDER BY
    Stars DESC;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------+-------------+
| stars | RatingCount |
+-------+-------------+
|   5.0 |           5 |
|   4.5 |           2 |
|   4.0 |           1 |
|   3.5 |           2 |
|   3.0 |           2 |
|   2.5 |           1 |
|   2.0 |           1 |
+-------+-------------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

SELECT
    name,
    review_count
FROM
    user
GROUP BY
    name
ORDER BY
    review_count DESC
LIMIT 3;


	
		
Copy and Paste the Result Below:

+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| .Hon   |         1246 |
| eric   |         1116 |
+--------+--------------+

8. Does posing more reviews correlate with more fans?

SELECT
    SUM(Fans) AS TotalFans
FROM
    User

+-----------+
| TotalFans |
+-----------+
|     14896 |
+-----------+


SELECT
    SUM(review_count) AS Totalreviews
FROM
    business


    +--------------+
| Totalreviews |
+--------------+
|       304561 |
+--------------+

Please explain your findings and interpretation of the results:

Its hard to tell using SQL as I would ideally try to tell it with a scatterplot graph, but it makes sense that more fans lead to more reviews.

9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:There are more with the word "love".


	SQL code used to arrive at answer:
	+-----------+-----------+
| LoveCount | HateCount |
+-----------+-----------+
|      1780 |       232 |
+-----------+-----------+

10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

	SELECT
    name,
    fans
FROM
    user
GROUP BY
    name
ORDER BY
    fans DESC
LIMIT 10
	
	
	Copy and Paste the Result Below:

	+-----------+------+
| name      | fans |
+-----------+------+
| Gerald    |  253 |
| Lissa     |  120 |
| bernice   |  105 |
| Roanna    |  104 |
| .Hon      |  101 |
| Nieves    |   80 |
| Sui       |   78 |
| Koizumi   |   73 |
| rebecca   |   69 |
| Princeton |   64 |
+-----------+------+

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

SELECT
    name,
    stars,
    CASE
        WHEN stars BETWEEN 2 AND 3 THEN '2-3 Stars'
        WHEN stars BETWEEN 4 AND 5 THEN '4-5 Stars'
        ELSE 'Other'
    END AS RatingGroup
FROM 
    business
INNER JOIN 
    category ON business.id = category.business_id
WHERE
    category.category = 'Restaurants'
GROUP BY
    name, stars
ORDER BY 
    stars;

    (I chose NY and restaurants)

i. Do the two groups you chose to analyze have a different distribution of hours?

SELECT
    business.name AS BusinessName,
    business.stars AS StarRating,
    hours.hours AS OperatingHours,
    CASE
        WHEN business.stars BETWEEN 2 AND 3 THEN '2-3 Stars'
        WHEN business.stars BETWEEN 4 AND 5 THEN '4-5 Stars'
        ELSE 'Other'
    END AS RatingGroup
FROM 
    business
INNER JOIN 
    category ON business.id = category.business_id
INNER JOIN
    hours ON business.id = hours.business_id
WHERE
    category.category = 'Restaurants'
    AND business.stars BETWEEN 4 AND 5
GROUP BY
    BusinessName, StarRating, OperatingHours
ORDER BY 
    StarRating;



    +----------------------------------------+------------+-----------------------+-------------+
| BusinessName                           | StarRating | OperatingHours        | RatingGroup |
+----------------------------------------+------------+-----------------------+-------------+
| Big Wong Restaurant                    |        4.0 | Friday|10:00-23:00    | 4-5 Stars   |
| Big Wong Restaurant                    |        4.0 | Monday|10:00-23:00    | 4-5 Stars   |
| Big Wong Restaurant                    |        4.0 | Saturday|10:00-23:00  | 4-5 Stars   |
| Big Wong Restaurant                    |        4.0 | Sunday|10:00-23:00    | 4-5 Stars   |
| Big Wong Restaurant                    |        4.0 | Thursday|10:00-23:00  | 4-5 Stars   |
| Big Wong Restaurant                    |        4.0 | Tuesday|10:00-23:00   | 4-5 Stars   |
| Big Wong Restaurant                    |        4.0 | Wednesday|10:00-23:00 | 4-5 Stars   |
| Bootleggers Modern American Smokehouse |        4.0 | Friday|11:00-22:00    | 4-5 Stars   |
| Bootleggers Modern American Smokehouse |        4.0 | Monday|11:00-22:00    | 4-5 Stars   |
| Bootleggers Modern American Smokehouse |        4.0 | Saturday|11:00-22:00  | 4-5 Stars   |
| Bootleggers Modern American Smokehouse |        4.0 | Sunday|11:00-22:00    | 4-5 Stars   |
| Bootleggers Modern American Smokehouse |        4.0 | Thursday|11:00-22:00  | 4-5 Stars   |
| Bootleggers Modern American Smokehouse |        4.0 | Tuesday|11:00-22:00   | 4-5 Stars   |
| Bootleggers Modern American Smokehouse |        4.0 | Wednesday|11:00-22:00 | 4-5 Stars   |
| C's Restaurant Bakery and Coffee Shop  |        4.0 | Friday|6:00-14:00     | 4-5 Stars   |
| C's Restaurant Bakery and Coffee Shop  |        4.0 | Monday|6:00-14:00     | 4-5 Stars   |
| C's Restaurant Bakery and Coffee Shop  |        4.0 | Saturday|6:00-14:00   | 4-5 Stars   |
| C's Restaurant Bakery and Coffee Shop  |        4.0 | Sunday|7:00-13:00     | 4-5 Stars   |
| C's Restaurant Bakery and Coffee Shop  |        4.0 | Thursday|6:00-14:00   | 4-5 Stars   |
| C's Restaurant Bakery and Coffee Shop  |        4.0 | Tuesday|6:00-14:00    | 4-5 Stars   |
| C's Restaurant Bakery and Coffee Shop  |        4.0 | Wednesday|6:00-14:00  | 4-5 Stars   |
| Edulis                                 |        4.0 | Friday|18:00-23:00    | 4-5 Stars   |
| Edulis                                 |        4.0 | Saturday|18:00-23:00  | 4-5 Stars   |
| Edulis                                 |        4.0 | Sunday|12:00-16:00    | 4-5 Stars   |
| Edulis                                 |        4.0 | Thursday|18:00-23:00  | 4-5 Stars   |
+----------------------------------------+------------+-----------------------+-------------+

SELECT
    business.name AS BusinessName,
    business.stars AS StarRating,
    hours.hours AS OperatingHours,
    CASE
        WHEN business.stars BETWEEN 2 AND 3 THEN '2-3 Stars'
        WHEN business.stars BETWEEN 4 AND 5 THEN '4-5 Stars'
        ELSE 'Other'
    END AS RatingGroup
FROM 
    business
INNER JOIN 
    category ON business.id = category.business_id
INNER JOIN
    hours ON business.id = hours.business_id
WHERE
    category.category = 'Restaurants'
GROUP BY
    BusinessName, StarRating, OperatingHours
ORDER BY 
    StarRating;


    +------------------+------------+-----------------------+-------------+
| BusinessName     | StarRating | OperatingHours        | RatingGroup |
+------------------+------------+-----------------------+-------------+
| 99 Cent Sushi    |        2.0 | Friday|11:00-23:00    | 2-3 Stars   |
| 99 Cent Sushi    |        2.0 | Monday|11:00-23:00    | 2-3 Stars   |
| 99 Cent Sushi    |        2.0 | Saturday|11:00-23:00  | 2-3 Stars   |
| 99 Cent Sushi    |        2.0 | Sunday|11:00-23:00    | 2-3 Stars   |
| 99 Cent Sushi    |        2.0 | Thursday|11:00-23:00  | 2-3 Stars   |
| 99 Cent Sushi    |        2.0 | Tuesday|11:00-23:00   | 2-3 Stars   |
| 99 Cent Sushi    |        2.0 | Wednesday|11:00-23:00 | 2-3 Stars   |
| McDonald's       |        2.0 | Friday|5:00-0:00      | 2-3 Stars   |
| McDonald's       |        2.0 | Monday|5:00-23:00     | 2-3 Stars   |
| McDonald's       |        2.0 | Saturday|5:00-0:00    | 2-3 Stars   |
| McDonald's       |        2.0 | Sunday|5:00-23:00     | 2-3 Stars   |
| McDonald's       |        2.0 | Thursday|5:00-23:00   | 2-3 Stars   |
| McDonald's       |        2.0 | Tuesday|5:00-23:00    | 2-3 Stars   |
| McDonald's       |        2.0 | Wednesday|5:00-23:00  | 2-3 Stars   |
| Papa Da Vinci    |        2.5 | Friday|11:00-3:00     | 2-3 Stars   |
| Papa Da Vinci    |        2.5 | Monday|17:00-1:00     | 2-3 Stars   |
| Papa Da Vinci    |        2.5 | Saturday|11:00-3:00   | 2-3 Stars   |
| Papa Da Vinci    |        2.5 | Sunday|11:00-1:00     | 2-3 Stars   |
| Papa Da Vinci    |        2.5 | Thursday|17:00-3:00   | 2-3 Stars   |
| Papa Da Vinci    |        2.5 | Tuesday|17:00-1:00    | 2-3 Stars   |
| Papa Da Vinci    |        2.5 | Wednesday|17:00-1:00  | 2-3 Stars   |
| Big Smoke Burger |        3.0 | Friday|10:30-21:00    | 2-3 Stars   |
| Big Smoke Burger |        3.0 | Monday|10:30-21:00    | 2-3 Stars   |
| Big Smoke Burger |        3.0 | Saturday|10:30-21:00  | 2-3 Stars   |
| Big Smoke Burger |        3.0 | Sunday|11:00-19:00    | 2-3 Stars   |
+------------------+------------+-----------------------+-------------+

Apparently there is no great difference between the operating hours, also they depend on the kind of restaurant that we are talking about. But it makes sense that the most stars are not achieved by more hours, but by more quality instead.

ii. Do the two groups you chose to analyze have a different number of reviews?

SELECT
    COUNT(review.id) AS TotalReviews_2_3_Stars
FROM
    business
LEFT JOIN
    review ON business.id = review.business_id
WHERE
    business.stars BETWEEN 2 AND 3;

    +------------------------+
| TotalReviews_2_3_Stars |
+------------------------+
|                    128 |
+------------------------+

SELECT
    COUNT(review.id) AS TotalReviews_4_5_Stars
FROM
    business
LEFT JOIN
    review ON business.id = review.business_id
WHERE
    business.stars BETWEEN 4 AND 5;

    +------------------------+
| TotalReviews_4_5_Stars |
+------------------------+
|                    335 |
+------------------------+

So the group with more stars has several more reviews

iii. Are you able to infer anything from the location data provided between these two groups? Explain.

So it makes total sense, the better neigbourhoods (richest ones) have more 4-5 stars restaurants while the poorest ones have more 2-3 stars ones.

SQL code used for analysis:

SELECT
    neighborhood,
    COUNT(*) AS TotalBusinesses_2_3_Stars
FROM
    business
WHERE
    stars BETWEEN 2 AND 3
GROUP BY
    neighborhood
ORDER BY
    TotalBusinesses_2_3_Stars DESC;

    +-------------------------------+---------------------------+
| neighborhood                  | TotalBusinesses_2_3_Stars |
+-------------------------------+---------------------------+
|                               |                      1760 |
| The Strip                     |                        56 |
| Southeast                     |                        54 |
| Westside                      |                        48 |
| Ville-Marie                   |                        44 |
| Etobicoke                     |                        41 |
| Scarborough                   |                        41 |
| Eastside                      |                        36 |
| Downtown                      |                        31 |
| Downtown Core                 |                        26 |
| Spring Valley                 |                        26 |
| Centennial                    |                        19 |
| Chinatown                     |                        17 |
| Plateau-Mont-Royal            |                        17 |
| Mount Pleasant and Davisville |                        14 |
| Anthem                        |                        13 |
| Entertainment District        |                        13 |
| Sunrise                       |                        13 |
| Ballantyne                    |                        12 |
| Eastland                      |                        12 |
| Southwest                     |                        12 |
| Northwest                     |                        11 |
| Summerlin                     |                        11 |
| South Park                    |                        10 |
| Unionville                    |                        10 |
+-------------------------------+---------------------------+

SELECT
    neighborhood,
    COUNT(*) AS TotalBusinesses_4_5_Stars
FROM
    business
WHERE
    stars BETWEEN 4 AND 5
GROUP BY
    neighborhood
ORDER BY
    TotalBusinesses_4_5_Stars DESC;

    +---------------------------+---------------------------+
| neighborhood              | TotalBusinesses_4_5_Stars |
+---------------------------+---------------------------+
|                           |                      3040 |
| Spring Valley             |                       107 |
| Westside                  |                       107 |
| Southeast                 |                       103 |
| Downtown                  |                        77 |
| The Strip                 |                        68 |
| Ville-Marie               |                        62 |
| Plateau-Mont-Royal        |                        55 |
| Southwest                 |                        48 |
| Eastside                  |                        46 |
| Anthem                    |                        37 |
| Downtown Core             |                        37 |
| Chinatown                 |                        34 |
| Scarborough               |                        33 |
| Summerlin                 |                        32 |
| New Town                  |                        30 |
| Old Town                  |                        29 |
| Northwest                 |                        27 |
| Etobicoke                 |                        25 |
| Capitol                   |                        24 |
| Centennial                |                        24 |
| Strip District            |                        19 |
| Rosemont-La Petite-Patrie |                        18 |
| Leslieville               |                        16 |
| University                |                        16 |
+---------------------------+---------------------------+
(Output limit exceeded, 25 of 239 total rows shown)

2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.

SQL code used for analysis:

i. Difference 1:

SELECT
    is_open,
    AVG(stars) AS AverageStarRating
FROM
    business
GROUP BY
    is_open;

    +---------+-------------------+
| is_open | AverageStarRating |
+---------+-------------------+
|       0 | 3.520394736842105 |
|       1 | 3.679009433962264 |
+---------+-------------------+

The ones that are still open have more average stars.

ii. Difference 2:

SELECT
    is_open,
    AVG(review_count) AS AverageReviewCount
FROM
    business
GROUP BY
    is_open;

    +---------+--------------------+
| is_open | AverageReviewCount |
+---------+--------------------+
|       0 | 23.198026315789473 |
|       1 | 31.757075471698112 |
+---------+--------------------+

The ones that are still open have more reviews.

3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:


The type of analysis chosen for this query is to analyze the sentiment distribution of Yelp reviews based on star ratings. Specifically, we categorize reviews into positive, negative, or neutral sentiments based on their star ratings.
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:


For this analysis, we primarily need data from the Yelp reviews dataset, including information such as review text and star ratings. The review text provides the content that we will analyze to determine sentiment, while star ratings serve as a proxy for sentiment polarity, with higher ratings indicating positive sentiment and lower ratings indicating negative sentiment.


                           
                  
iii. Output of your finished dataset:

+-----------------+--------------+
| sentiment_label | review_count |
+-----------------+--------------+
| Negative        |         2229 |
| Neutral         |         1219 |
| Positive        |         6552 |
+-----------------+--------------+
         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT
    CASE
        WHEN stars >= 4 THEN 'Positive'
        WHEN stars <= 2 THEN 'Negative'
        ELSE 'Neutral'
    END AS sentiment_label,
    COUNT(*) AS review_count
FROM
    review
GROUP BY
    sentiment_label;